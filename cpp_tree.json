{
    "preproc_include_199_219": "#include <iostream>\n",
    "#include_199_207": "#include",
    "system_lib_string_208_218": "<iostream>",
    "preproc_include_219_238": "#include <cstdlib>\n",
    "#include_219_227": "#include",
    "system_lib_string_228_237": "<cstdlib>",
    "preproc_include_238_256": "#include <string>\n",
    "#include_238_246": "#include",
    "system_lib_string_247_255": "<string>",
    "preproc_include_256_274": "#include <vector>\n",
    "#include_256_264": "#include",
    "system_lib_string_265_273": "<vector>",
    "preproc_include_274_293": "#include <fstream>\n",
    "#include_274_282": "#include",
    "system_lib_string_283_292": "<fstream>",
    "preproc_include_293_312": "#include <iomanip>\n",
    "#include_293_301": "#include",
    "system_lib_string_302_311": "<iomanip>",
    "preproc_include_312_337": "#include <bits/stdc++.h>\n",
    "#include_312_320": "#include",
    "system_lib_string_321_336": "<bits/stdc++.h>",
    "using_declaration_337_357": "using namespace std;",
    "using_337_342": "using",
    "namespace_343_352": "namespace",
    "identifier_353_356": "std",
    "function_definition_358_472": "int f_gold ( int x ) {\n  int m = 1;\n  while ( x & m ) {\n    x = x ^ m;\n    m <<= 1;\n  }\n  x = x ^ m;\n  return x;\n}",
    "primitive_type_358_361": "int",
    "function_declarator_362_378": "f_gold ( int x )",
    "identifier_362_368": "f_gold",
    "parameter_list_369_378": "( int x )",
    "parameter_declaration_371_376": "int x",
    "primitive_type_371_374": "int",
    "identifier_375_376": "x",
    "compound_statement_379_472": "{\n  int m = 1;\n  while ( x & m ) {\n    x = x ^ m;\n    m <<= 1;\n  }\n  x = x ^ m;\n  return x;\n}",
    "declaration_383_393": "int m = 1;",
    "primitive_type_383_386": "int",
    "init_declarator_387_392": "m = 1",
    "identifier_387_388": "m",
    "number_literal_391_392": "1",
    "while_statement_396_445": "while ( x & m ) {\n    x = x ^ m;\n    m <<= 1;\n  }",
    "while_396_401": "while",
    "condition_clause_402_411": "( x & m )",
    "binary_expression_404_409": "x & m",
    "identifier_404_405": "x",
    "identifier_408_409": "m",
    "compound_statement_412_445": "{\n    x = x ^ m;\n    m <<= 1;\n  }",
    "expression_statement_418_428": "x = x ^ m;",
    "assignment_expression_418_427": "x = x ^ m",
    "identifier_418_419": "x",
    "binary_expression_422_427": "x ^ m",
    "identifier_422_423": "x",
    "identifier_426_427": "m",
    "expression_statement_433_441": "m <<= 1;",
    "assignment_expression_433_440": "m <<= 1",
    "identifier_433_434": "m",
    "number_literal_439_440": "1",
    "expression_statement_448_458": "x = x ^ m;",
    "assignment_expression_448_457": "x = x ^ m",
    "identifier_448_449": "x",
    "binary_expression_452_457": "x ^ m",
    "identifier_452_453": "x",
    "identifier_456_457": "m",
    "return_statement_461_470": "return x;",
    "return_461_467": "return",
    "identifier_468_469": "x",
    "function_definition_485_815": "int main() {\n    int n_success = 0;\n    vector<int> param0 {96,66,67,13,75,78,1,83,27,65};\n    for(int i = 0; i < param0.size(); ++i)\n    {\n        if(f_filled(param0[i]) == f_gold(param0[i]))\n        {\n            n_success+=1;\n        }\n    }\n    cout << \"#Results:\" << \" \" << n_success << \", \" << param0.size();\n    return 0;\n}",
    "primitive_type_485_488": "int",
    "function_declarator_489_495": "main()",
    "identifier_489_493": "main",
    "parameter_list_493_495": "()",
    "compound_statement_496_815": "{\n    int n_success = 0;\n    vector<int> param0 {96,66,67,13,75,78,1,83,27,65};\n    for(int i = 0; i < param0.size(); ++i)\n    {\n        if(f_filled(param0[i]) == f_gold(param0[i]))\n        {\n            n_success+=1;\n        }\n    }\n    cout << \"#Results:\" << \" \" << n_success << \", \" << param0.size();\n    return 0;\n}",
    "declaration_502_520": "int n_success = 0;",
    "primitive_type_502_505": "int",
    "init_declarator_506_519": "n_success = 0",
    "identifier_506_515": "n_success",
    "number_literal_518_519": "0",
    "declaration_525_575": "vector<int> param0 {96,66,67,13,75,78,1,83,27,65};",
    "template_type_525_536": "vector<int>",
    "type_identifier_525_531": "vector",
    "template_argument_list_531_536": "<int>",
    "type_descriptor_532_535": "int",
    "primitive_type_532_535": "int",
    "init_declarator_537_574": "param0 {96,66,67,13,75,78,1,83,27,65}",
    "identifier_537_543": "param0",
    "initializer_list_544_574": "{96,66,67,13,75,78,1,83,27,65}",
    "number_literal_545_547": "96",
    "number_literal_548_550": "66",
    "number_literal_551_553": "67",
    "number_literal_554_556": "13",
    "number_literal_557_559": "75",
    "number_literal_560_562": "78",
    "number_literal_563_564": "1",
    "number_literal_565_567": "83",
    "number_literal_568_570": "27",
    "number_literal_571_573": "65",
    "for_statement_580_729": "for(int i = 0; i < param0.size(); ++i)\n    {\n        if(f_filled(param0[i]) == f_gold(param0[i]))\n        {\n            n_success+=1;\n        }\n    }",
    "for_580_583": "for",
    "declaration_584_594": "int i = 0;",
    "primitive_type_584_587": "int",
    "init_declarator_588_593": "i = 0",
    "identifier_588_589": "i",
    "number_literal_592_593": "0",
    "binary_expression_595_612": "i < param0.size()",
    "identifier_595_596": "i",
    "call_expression_599_612": "param0.size()",
    "field_expression_599_610": "param0.size",
    "identifier_599_605": "param0",
    "field_identifier_606_610": "size",
    "argument_list_610_612": "()",
    "update_expression_614_617": "++i",
    "identifier_616_617": "i",
    "compound_statement_623_729": "{\n        if(f_filled(param0[i]) == f_gold(param0[i]))\n        {\n            n_success+=1;\n        }\n    }",
    "if_statement_633_723": "if(f_filled(param0[i]) == f_gold(param0[i]))\n        {\n            n_success+=1;\n        }",
    "if_633_635": "if",
    "condition_clause_635_677": "(f_filled(param0[i]) == f_gold(param0[i]))",
    "binary_expression_636_676": "f_filled(param0[i]) == f_gold(param0[i])",
    "call_expression_636_655": "f_filled(param0[i])",
    "identifier_636_644": "f_filled",
    "argument_list_644_655": "(param0[i])",
    "subscript_expression_645_654": "param0[i]",
    "identifier_645_651": "param0",
    "identifier_652_653": "i",
    "call_expression_659_676": "f_gold(param0[i])",
    "identifier_659_665": "f_gold",
    "argument_list_665_676": "(param0[i])",
    "subscript_expression_666_675": "param0[i]",
    "identifier_666_672": "param0",
    "identifier_673_674": "i",
    "compound_statement_686_723": "{\n            n_success+=1;\n        }",
    "expression_statement_700_713": "n_success+=1;",
    "assignment_expression_700_712": "n_success+=1",
    "identifier_700_709": "n_success",
    "number_literal_711_712": "1",
    "expression_statement_734_799": "cout << \"#Results:\" << \" \" << n_success << \", \" << param0.size();",
    "binary_expression_734_798": "cout << \"#Results:\" << \" \" << n_success << \", \" << param0.size()",
    "binary_expression_734_781": "cout << \"#Results:\" << \" \" << n_success << \", \"",
    "binary_expression_734_773": "cout << \"#Results:\" << \" \" << n_success",
    "binary_expression_734_760": "cout << \"#Results:\" << \" \"",
    "binary_expression_734_753": "cout << \"#Results:\"",
    "identifier_734_738": "cout",
    "string_literal_742_753": "\"#Results:\"",
    "string_literal_757_760": "\" \"",
    "identifier_764_773": "n_success",
    "string_literal_777_781": "\", \"",
    "call_expression_785_798": "param0.size()",
    "field_expression_785_796": "param0.size",
    "identifier_785_791": "param0",
    "field_identifier_792_796": "size",
    "argument_list_796_798": "()",
    "return_statement_804_813": "return 0;",
    "return_804_810": "return",
    "number_literal_811_812": "0"
}