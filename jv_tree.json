{
    "ERROR_0_16": "// Copyright (c)",
    "call_3_16": "Copyright (c)",
    "identifier_3_12": "Copyright",
    "argument_list_13_16": "(c)",
    "identifier_14_15": "c",
    "expression_statement_17_135": "2019-present, Facebook, Inc.\n// All rights reserved.\n//\n// This source code is licensed under the license found in the",
    "binary_operator_17_29": "2019-present",
    "integer_17_21": "2019",
    "identifier_22_29": "present",
    "identifier_31_39": "Facebook",
    "comparison_operator_41_135": "Inc.\n// All rights reserved.\n//\n// This source code is licensed under the license found in the",
    "attribute_41_80": "Inc.\n// All rights reserved.\n//\n// This",
    "attribute_41_52": "Inc.\n// All",
    "identifier_41_44": "Inc",
    "ERROR_46_48": "//",
    "identifier_49_52": "All",
    "ERROR_53_68": "rights reserved",
    "identifier_53_59": "rights",
    "identifier_60_68": "reserved",
    "ERROR_70_75": "//\n//",
    "identifier_76_80": "This",
    "ERROR_81_92": "source code",
    "identifier_81_87": "source",
    "identifier_88_92": "code",
    "is_93_95": "is",
    "ERROR_96_122": "licensed under the license",
    "identifier_96_104": "licensed",
    "identifier_105_110": "under",
    "identifier_111_114": "the",
    "identifier_115_122": "license",
    "identifier_123_128": "found",
    "in_129_131": "in",
    "identifier_132_135": "the",
    "ERROR_136_219": "// LICENSE file in the root directory of this source tree.\n//\n\nimport java.util. *;",
    "identifier_139_146": "LICENSE",
    "identifier_147_151": "file",
    "in_152_154": "in",
    "ERROR_155_188": "the root directory of this source",
    "identifier_155_158": "the",
    "identifier_159_163": "root",
    "identifier_164_173": "directory",
    "identifier_174_176": "of",
    "identifier_177_181": "this",
    "identifier_182_188": "source",
    "identifier_189_193": "tree",
    "import_199_205": "import",
    "identifier_206_210": "java",
    "identifier_211_215": "util",
    "import_statement_220_243": "import java.util.stream",
    "import_220_226": "import",
    "dotted_name_227_243": "java.util.stream",
    "identifier_227_231": "java",
    "identifier_232_236": "util",
    "identifier_237_243": "stream",
    "ERROR_243_245": ".*",
    "import_statement_247_263": "import java.lang",
    "import_247_253": "import",
    "dotted_name_254_263": "java.lang",
    "identifier_254_258": "java",
    "identifier_259_263": "lang",
    "ERROR_263_265": ".*",
    "import_statement_267_290": "import javafx.util.Pair",
    "import_267_273": "import",
    "dotted_name_274_290": "javafx.util.Pair",
    "identifier_274_280": "javafx",
    "identifier_281_285": "util",
    "identifier_286_290": "Pair",
    "ERROR_292_458": "public class ADD_1_TO_A_GIVEN_NUMBER{\nstatic int f_gold ( int x ) {\n  int m = 1 ;\n  while ( ( int ) ( x & m ) >= 1 ) {\n    x = x ^ m ;\n    m <<= 1 ;\n  }\n  x = x ^ m ;",
    "identifier_292_298": "public",
    "class_299_304": "class",
    "identifier_305_328": "ADD_1_TO_A_GIVEN_NUMBER",
    "ERROR_330_357": "static int f_gold ( int x )",
    "identifier_330_336": "static",
    "identifier_337_340": "int",
    "call_341_357": "f_gold ( int x )",
    "identifier_341_347": "f_gold",
    "argument_list_348_357": "( int x )",
    "identifier_350_353": "int",
    "ERROR_354_355": "x",
    "identifier_354_355": "x",
    "identifier_362_365": "int",
    "identifier_366_367": "m",
    "integer_370_371": "1",
    "while_376_381": "while",
    "ERROR_382_450": "( ( int ) ( x & m ) >= 1 ) {\n    x = x ^ m ;\n    m <<= 1 ;\n  }\n  x =",
    "parenthesized_expression_382_408": "( ( int ) ( x & m ) >= 1 )",
    "comparison_operator_384_406": "( int ) ( x & m ) >= 1",
    "call_384_401": "( int ) ( x & m )",
    "parenthesized_expression_384_391": "( int )",
    "identifier_386_389": "int",
    "argument_list_392_401": "( x & m )",
    "binary_operator_394_399": "x & m",
    "identifier_394_395": "x",
    "identifier_398_399": "m",
    "integer_405_406": "1",
    "set_409_444": "{\n    x = x ^ m ;\n    m <<= 1 ;\n  }",
    "ERROR_415_418": "x =",
    "identifier_415_416": "x",
    "binary_operator_419_438": "x ^ m ;\n    m <<= 1",
    "identifier_419_420": "x",
    "ERROR_423_436": "m ;\n    m <<=",
    "identifier_423_424": "m",
    "identifier_431_432": "m",
    "integer_437_438": "1",
    "ERROR_439_440": ";",
    "identifier_447_448": "x",
    "binary_operator_451_456": "x ^ m",
    "identifier_451_452": "x",
    "identifier_455_456": "m",
    "return_statement_461_469": "return x",
    "return_461_467": "return",
    "identifier_468_469": "x",
    "ERROR_472_478": "}\n\n\n//",
    "expression_statement_478_484": "TOFILL",
    "identifier_478_484": "TOFILL",
    "expression_statement_486_524": "public static void main(String args[])",
    "call_486_524": "public static void main(String args[])",
    "identifier_486_492": "public",
    "ERROR_493_509": "static void main",
    "identifier_493_499": "static",
    "identifier_500_504": "void",
    "identifier_505_509": "main",
    "argument_list_509_524": "(String args[])",
    "subscript_510_523": "String args[]",
    "identifier_510_516": "String",
    "ERROR_517_521": "args",
    "identifier_517_521": "args",
    "identifier_522_522": "",
    "expression_statement_525_548": "{\n    int n_success = 0",
    "set_525_548": "{\n    int n_success = 0",
    "ERROR_531_546": "int n_success =",
    "identifier_531_534": "int",
    "identifier_535_544": "n_success",
    "integer_547_548": "0",
    "ERROR_554_580": "List<Integer> param0 = new",
    "comparison_operator_554_574": "List<Integer> param0",
    "identifier_554_558": "List",
    "<_558_559": "<",
    "identifier_559_566": "Integer",
    ">_566_567": ">",
    "identifier_568_574": "param0",
    "identifier_577_580": "new",
    "expression_statement_581_594": "ArrayList<>()",
    "comparison_operator_581_594": "ArrayList<>()",
    "identifier_581_590": "ArrayList",
    "<>_590_592": "<>",
    "tuple_592_594": "()",
    "expression_statement_600_614": "param0.add(96)",
    "call_600_614": "param0.add(96)",
    "attribute_600_610": "param0.add",
    "identifier_600_606": "param0",
    "identifier_607_610": "add",
    "argument_list_610_614": "(96)",
    "integer_611_613": "96",
    "expression_statement_620_634": "param0.add(66)",
    "call_620_634": "param0.add(66)",
    "attribute_620_630": "param0.add",
    "identifier_620_626": "param0",
    "identifier_627_630": "add",
    "argument_list_630_634": "(66)",
    "integer_631_633": "66",
    "expression_statement_640_654": "param0.add(67)",
    "call_640_654": "param0.add(67)",
    "attribute_640_650": "param0.add",
    "identifier_640_646": "param0",
    "identifier_647_650": "add",
    "argument_list_650_654": "(67)",
    "integer_651_653": "67",
    "expression_statement_660_674": "param0.add(13)",
    "call_660_674": "param0.add(13)",
    "attribute_660_670": "param0.add",
    "identifier_660_666": "param0",
    "identifier_667_670": "add",
    "argument_list_670_674": "(13)",
    "integer_671_673": "13",
    "expression_statement_680_694": "param0.add(75)",
    "call_680_694": "param0.add(75)",
    "attribute_680_690": "param0.add",
    "identifier_680_686": "param0",
    "identifier_687_690": "add",
    "argument_list_690_694": "(75)",
    "integer_691_693": "75",
    "expression_statement_700_714": "param0.add(78)",
    "call_700_714": "param0.add(78)",
    "attribute_700_710": "param0.add",
    "identifier_700_706": "param0",
    "identifier_707_710": "add",
    "argument_list_710_714": "(78)",
    "integer_711_713": "78",
    "expression_statement_720_733": "param0.add(1)",
    "call_720_733": "param0.add(1)",
    "attribute_720_730": "param0.add",
    "identifier_720_726": "param0",
    "identifier_727_730": "add",
    "argument_list_730_733": "(1)",
    "integer_731_732": "1",
    "expression_statement_739_753": "param0.add(83)",
    "call_739_753": "param0.add(83)",
    "attribute_739_749": "param0.add",
    "identifier_739_745": "param0",
    "identifier_746_749": "add",
    "argument_list_749_753": "(83)",
    "integer_750_752": "83",
    "expression_statement_759_773": "param0.add(27)",
    "call_759_773": "param0.add(27)",
    "attribute_759_769": "param0.add",
    "identifier_759_765": "param0",
    "identifier_766_769": "add",
    "argument_list_769_773": "(27)",
    "integer_770_772": "27",
    "expression_statement_779_793": "param0.add(65)",
    "call_779_793": "param0.add(65)",
    "attribute_779_789": "param0.add",
    "identifier_779_785": "param0",
    "identifier_786_789": "add",
    "argument_list_789_793": "(65)",
    "integer_790_792": "65",
    "ERROR_799_1032": "for(int i = 0; i < param0.size(); ++i)\n    {\n        if(f_filled(param0.get(i)) == f_gold(param0.get(i)))\n        {\n            n_success+=1;\n        }\n    }\n    System.out.println(\"#Results:\" + n_success + \", \" + param0.size());\n}\n}",
    "for_799_802": "for",
    "ERROR_802_956": "(int i = 0; i < param0.size(); ++i)\n    {\n        if(f_filled(param0.get(i)) == f_gold(param0.get(i)))\n        {\n            n_success+=1;\n        }\n    }",
    "parenthesized_expression_802_837": "(int i = 0; i < param0.size(); ++i)",
    "ERROR_803_813": "int i = 0;",
    "identifier_803_806": "int",
    "identifier_807_808": "i",
    "integer_811_812": "0",
    "comparison_operator_814_836": "i < param0.size(); ++i",
    "identifier_814_815": "i",
    "<_816_817": "<",
    "binary_operator_818_836": "param0.size(); ++i",
    "call_818_831": "param0.size()",
    "attribute_818_829": "param0.size",
    "identifier_818_824": "param0",
    "identifier_825_829": "size",
    "argument_list_829_831": "()",
    "ERROR_831_832": ";",
    "unary_operator_834_836": "+i",
    "identifier_835_836": "i",
    "set_842_956": "{\n        if(f_filled(param0.get(i)) == f_gold(param0.get(i)))\n        {\n            n_success+=1;\n        }\n    }",
    "ERROR_852_904": "if(f_filled(param0.get(i)) == f_gold(param0.get(i)))",
    "call_852_904": "if(f_filled(param0.get(i)) == f_gold(param0.get(i)))",
    "identifier_852_854": "if",
    "argument_list_854_904": "(f_filled(param0.get(i)) == f_gold(param0.get(i)))",
    "comparison_operator_855_903": "f_filled(param0.get(i)) == f_gold(param0.get(i))",
    "call_855_878": "f_filled(param0.get(i))",
    "identifier_855_863": "f_filled",
    "argument_list_863_878": "(param0.get(i))",
    "call_864_877": "param0.get(i)",
    "attribute_864_874": "param0.get",
    "identifier_864_870": "param0",
    "identifier_871_874": "get",
    "argument_list_874_877": "(i)",
    "identifier_875_876": "i",
    "call_882_903": "f_gold(param0.get(i))",
    "identifier_882_888": "f_gold",
    "argument_list_888_903": "(param0.get(i))",
    "call_889_902": "param0.get(i)",
    "attribute_889_899": "param0.get",
    "identifier_889_895": "param0",
    "identifier_896_899": "get",
    "argument_list_899_902": "(i)",
    "identifier_900_901": "i",
    "set_913_950": "{\n            n_success+=1;\n        }",
    "identifier_927_936": "n_success",
    "ERROR_936_940": "+=1;",
    "integer_938_939": "1",
    "call_961_1027": "System.out.println(\"#Results:\" + n_success + \", \" + param0.size())",
    "attribute_961_979": "System.out.println",
    "attribute_961_971": "System.out",
    "identifier_961_967": "System",
    "identifier_968_971": "out",
    "identifier_972_979": "println",
    "argument_list_979_1027": "(\"#Results:\" + n_success + \", \" + param0.size())",
    "binary_operator_980_1026": "\"#Results:\" + n_success + \", \" + param0.size()",
    "binary_operator_980_1010": "\"#Results:\" + n_success + \", \"",
    "binary_operator_980_1003": "\"#Results:\" + n_success",
    "string_980_991": "\"#Results:\"",
    "identifier_994_1003": "n_success",
    "string_1006_1010": "\", \"",
    "call_1013_1026": "param0.size()",
    "attribute_1013_1024": "param0.size",
    "identifier_1013_1019": "param0",
    "identifier_1020_1024": "size",
    "argument_list_1024_1026": "()"
}